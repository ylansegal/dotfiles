#!/usr/bin/env ruby
# Generate tag index for personal Zettelkasten

require "fileutils"
require "set"

ZK_HOME = ENV.fetch("ZK_HOME")
FileUtils.cd(ZK_HOME)

module Zettelkasten
  refine String do
    def tag_to_filename
      gsub(/\[\[(.*)\]\]/, '\1.md')
    end

    def filename_to_tag
      gsub(/(.*)(\.md)/, '[[\1]]')
    end
  end
end

using Zettelkasten

FileUtils.mkdir_p("Tags")

# - Read each eligible file in, and find tags
files_to_index = Dir.glob("**/*.md") - Dir.glob("Tags*.md") - Dir.glob("Tags/*.md")

files_to_tags = files_to_index.each_with_object(Hash.new { |h, k| h[k] = Set[] }) { |filename, memo|
  File.new(filename).each_line { |line|
    memo[filename] << line.chomp if line.match?('^\[\[Tags/.*\]\]$')
  }
}

tags = Set.new(files_to_tags.values.reduce(&:+))

# Write Tags.md
File.write("Tags.md", tags.to_a.sort.join("\n") << "\n")

# Calculate individual tag data
tag_file_data = tags.each_with_object({}) { |tag, memo|
  files_with_tag = files_to_tags.select { |_k, v| v.include?(tag) }

  memo[tag] = {
    uses: files_with_tag
      .keys
      .sort
      .map(&:filename_to_tag)
      .join("\n"),
    cross_ref: (files_with_tag.values.flat_map(&:to_a) - [tag])
      .tally
      .sort_by { |k, v| [-v, k] }
      .map { |k, v| "#{v} #{k}" }
      .join("\n")
  }
}

# Write each tag file
tag_file_data.each do |tag, tag_data|
  File.write tag.tag_to_filename, <<~MARKDOWN
    # Used in:
    #{tag_data[:uses]}

    # Tags Cross Reference:
    #{tag_data[:cross_ref]}
  MARKDOWN
end

# Remove unused tag files
files_to_delete = Dir.glob("Tags/*.md") - tags.map(&:tag_to_filename)
FileUtils.rm(files_to_delete, force: true)
